//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Thu Jul 31 22:29:38 2014 (1406860178)
// Cuda compilation tools, release 6.5, V6.5.14
//

.version 4.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 funj_retval0) cudaMalloj(
	.param .b64 cudaMalloj_param_0,
	.param .b64 cudaMalloj_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkSs(
	.param .b32 ___mkSs_param_0
)
{
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___mkSs_param_0];
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkSd(
	.param .b64 ___mkSd_param_0
)
{
	.reg .f32 	%f<2>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkSd_param_0];
	cvt.rn.f32.f64	%f1, %fd1;
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkSi(
	.param .b32 ___mkSi_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.u32 	%r1, [___mkSi_param_0];
	cvt.rn.f32.s32	%f1, %r1;
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkSu(
	.param .b32 ___mkSu_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.u32 	%r1, [___mkSu_param_0];
	cvt.rn.f32.u32	%f1, %r1;
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkSj(
	.param .b32 ___mkSj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f32 	%f<2>;


	ld.param.s8 	%rs1, [___mkSj_param_0];
	cvt.rn.f32.s16	%f1, %rs1;
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkSv(
	.param .b32 ___mkSv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f32 	%f<2>;


	ld.param.u8 	%rs1, [___mkSv_param_0];
	cvt.rn.f32.u16	%f1, %rs1;
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___mkDs(
	.param .b32 ___mkDs_param_0
)
{
	.reg .f32 	%f<2>;
	.reg .f64 	%fd<2>;


	ld.param.f32 	%f1, [___mkDs_param_0];
	cvt.f64.f32	%fd1, %f1;
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___mkDd(
	.param .b64 ___mkDd_param_0
)
{
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkDd_param_0];
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___mkDi(
	.param .b32 ___mkDi_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.u32 	%r1, [___mkDi_param_0];
	cvt.rn.f64.s32	%fd1, %r1;
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___mkDu(
	.param .b32 ___mkDu_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.u32 	%r1, [___mkDu_param_0];
	cvt.rn.f64.u32	%fd1, %r1;
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___mkDj(
	.param .b32 ___mkDj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f64 	%fd<2>;


	ld.param.s8 	%rs1, [___mkDj_param_0];
	cvt.rn.f64.s16	%fd1, %rs1;
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___mkDv(
	.param .b32 ___mkDv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f64 	%fd<2>;


	ld.param.u8 	%rs1, [___mkDv_param_0];
	cvt.rn.f64.u16	%fd1, %rs1;
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkIs(
	.param .b32 ___mkIs_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___mkIs_param_0];
	cvt.rzi.s32.f32	%r1, %f1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkId(
	.param .b64 ___mkId_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkId_param_0];
	cvt.rzi.s32.f64	%r1, %fd1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkIi(
	.param .b32 ___mkIi_param_0
)
{
	.reg .s32 	%r<2>;


	ld.param.u32 	%r1, [___mkIi_param_0];
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkIu(
	.param .b32 ___mkIu_param_0
)
{
	.reg .s32 	%r<2>;


	ld.param.u32 	%r1, [___mkIu_param_0];
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkIj(
	.param .b32 ___mkIj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___mkIj_param_0];
	cvt.s32.s16	%r1, %rs1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkIv(
	.param .b32 ___mkIv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___mkIv_param_0];
	cvt.u32.u16	%r1, %rs1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkUs(
	.param .b32 ___mkUs_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___mkUs_param_0];
	cvt.rzi.u32.f32	%r1, %f1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkUd(
	.param .b64 ___mkUd_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkUd_param_0];
	cvt.rzi.u32.f64	%r1, %fd1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkUi(
	.param .b32 ___mkUi_param_0
)
{
	.reg .s32 	%r<2>;


	ld.param.u32 	%r1, [___mkUi_param_0];
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkUu(
	.param .b32 ___mkUu_param_0
)
{
	.reg .s32 	%r<2>;


	ld.param.u32 	%r1, [___mkUu_param_0];
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkUj(
	.param .b32 ___mkUj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___mkUj_param_0];
	cvt.s32.s16	%r1, %rs1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkUv(
	.param .b32 ___mkUv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___mkUv_param_0];
	cvt.u32.u16	%r1, %rs1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkVs(
	.param .b32 ___mkVs_param_0
)
{
	.reg .s32 	%r<3>;
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___mkVs_param_0];
	cvt.rzi.u32.f32	%r1, %f1;
	and.b32  	%r2, %r1, 255;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkVd(
	.param .b64 ___mkVd_param_0
)
{
	.reg .s32 	%r<3>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkVd_param_0];
	cvt.rzi.u32.f64	%r1, %fd1;
	and.b32  	%r2, %r1, 255;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkVi(
	.param .b32 ___mkVi_param_0
)
{
	.reg .s32 	%r<2>;


	ld.param.u8 	%r1, [___mkVi_param_0];
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkVu(
	.param .b32 ___mkVu_param_0
)
{
	.reg .s32 	%r<2>;


	ld.param.u8 	%r1, [___mkVu_param_0];
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkVj(
	.param .b32 ___mkVj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<3>;


	ld.param.s8 	%rs1, [___mkVj_param_0];
	cvt.u32.u16	%r1, %rs1;
	and.b32  	%r2, %r1, 255;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkVv(
	.param .b32 ___mkVv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___mkVv_param_0];
	cvt.u32.u16	%r1, %rs1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkJs(
	.param .b32 ___mkJs_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___mkJs_param_0];
	setp.neu.f32	%p1, %f1, 0f00000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkJd(
	.param .b64 ___mkJd_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkJd_param_0];
	setp.neu.f64	%p1, %fd1, 0d0000000000000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkJi(
	.param .b32 ___mkJi_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<3>;


	ld.param.u32 	%r1, [___mkJi_param_0];
	setp.ne.s32	%p1, %r1, 0;
	selp.u32	%r2, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkJu(
	.param .b32 ___mkJu_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<3>;


	ld.param.u32 	%r1, [___mkJu_param_0];
	setp.ne.s32	%p1, %r1, 0;
	selp.u32	%r2, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkJj(
	.param .b32 ___mkJj_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___mkJj_param_0];
	and.b16  	%rs2, %rs1, 255;
	setp.ne.s16	%p1, %rs2, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___mkJv(
	.param .b32 ___mkJv_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___mkJv_param_0];
	setp.ne.s16	%p1, %rs1, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___mkCs(
	.param .b32 ___mkCs_param_0
)
{
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___mkCs_param_0];
	mov.f32 	%f2, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___mkCd(
	.param .b64 ___mkCd_param_0
)
{
	.reg .f32 	%f<3>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___mkCd_param_0];
	cvt.rn.f32.f64	%f1, %fd1;
	mov.f32 	%f2, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___mkCi(
	.param .b32 ___mkCi_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.u32 	%r1, [___mkCi_param_0];
	cvt.rn.f32.s32	%f1, %r1;
	mov.f32 	%f2, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___mkCu(
	.param .b32 ___mkCu_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.u32 	%r1, [___mkCu_param_0];
	cvt.rn.f32.u32	%f1, %r1;
	mov.f32 	%f2, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___mkCj(
	.param .b32 ___mkCj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f32 	%f<3>;


	ld.param.s8 	%rs1, [___mkCj_param_0];
	cvt.rn.f32.s16	%f1, %rs1;
	mov.f32 	%f2, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___mkCv(
	.param .b32 ___mkCv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f32 	%f<3>;


	ld.param.u8 	%rs1, [___mkCv_param_0];
	cvt.rn.f32.u16	%f1, %rs1;
	mov.f32 	%f2, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___mkZs(
	.param .b32 ___mkZs_param_0
)
{
	.reg .f32 	%f<2>;
	.reg .f64 	%fd<3>;


	mov.f64 	%fd1, 0d0000000000000000;
	ld.param.f32 	%f1, [___mkZs_param_0];
	cvt.f64.f32	%fd2, %f1;
	st.param.f64	[funj_retval0+0], %fd2;
	st.param.f64	[funj_retval0+8], %fd1;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___mkZd(
	.param .b64 ___mkZd_param_0
)
{
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___mkZd_param_0];
	mov.f64 	%fd2, 0d0000000000000000;
	st.param.f64	[funj_retval0+0], %fd1;
	st.param.f64	[funj_retval0+8], %fd2;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___mkZi(
	.param .b32 ___mkZi_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.u32 	%r1, [___mkZi_param_0];
	cvt.rn.f64.s32	%fd1, %r1;
	mov.f64 	%fd2, 0d0000000000000000;
	st.param.f64	[funj_retval0+0], %fd1;
	st.param.f64	[funj_retval0+8], %fd2;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___mkZu(
	.param .b32 ___mkZu_param_0
)
{
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.u32 	%r1, [___mkZu_param_0];
	cvt.rn.f64.u32	%fd1, %r1;
	mov.f64 	%fd2, 0d0000000000000000;
	st.param.f64	[funj_retval0+0], %fd1;
	st.param.f64	[funj_retval0+8], %fd2;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___mkZj(
	.param .b32 ___mkZj_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f64 	%fd<3>;


	ld.param.s8 	%rs1, [___mkZj_param_0];
	cvt.rn.f64.s16	%fd1, %rs1;
	mov.f64 	%fd2, 0d0000000000000000;
	st.param.f64	[funj_retval0+0], %fd1;
	st.param.f64	[funj_retval0+8], %fd2;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___mkZv(
	.param .b32 ___mkZv_param_0
)
{
	.reg .s16 	%rs<2>;
	.reg .f64 	%fd<3>;


	ld.param.u8 	%rs1, [___mkZv_param_0];
	cvt.rn.f64.u16	%fd1, %rs1;
	mov.f64 	%fd2, 0d0000000000000000;
	st.param.f64	[funj_retval0+0], %fd1;
	st.param.f64	[funj_retval0+8], %fd2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___realCc(
	.param .align 8 .b8 ___realCc_param_0[8]
)
{
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___realCc_param_0];
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___realZz(
	.param .align 16 .b8 ___realZz_param_0[16]
)
{
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___realZz_param_0];
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___imagCc(
	.param .align 8 .b8 ___imagCc_param_0[8]
)
{
	.reg .f32 	%f<2>;


	mov.f32 	%f1, 0f00000000;
	st.param.f32	[funj_retval0+0], %f1;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___imagZz(
	.param .align 16 .b8 ___imagZz_param_0[16]
)
{
	.reg .f64 	%fd<2>;


	mov.f64 	%fd1, 0d0000000000000000;
	st.param.f64	[funj_retval0+0], %fd1;
	ret;
}

.visible .func  (.param .align 8 .b8 funj_retval0[8]) ___cplxCss(
	.param .b32 ___cplxCss_param_0,
	.param .b32 ___cplxCss_param_1
)
{
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___cplxCss_param_0];
	ld.param.f32 	%f2, [___cplxCss_param_1];
	st.param.f32	[funj_retval0+0], %f1;
	st.param.f32	[funj_retval0+4], %f2;
	ret;
}

.visible .func  (.param .align 16 .b8 funj_retval0[16]) ___cplxZdd(
	.param .b64 ___cplxZdd_param_0,
	.param .b64 ___cplxZdd_param_1
)
{
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___cplxZdd_param_0];
	ld.param.f64 	%fd2, [___cplxZdd_param_1];
	st.param.f64	[funj_retval0+0], %fd1;
	st.param.f64	[funj_retval0+8], %fd2;
	ret;
}


