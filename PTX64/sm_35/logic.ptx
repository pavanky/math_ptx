//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Thu Jul 31 22:29:38 2014 (1406860178)
// Cuda compilation tools, release 6.5, V6.5.14
//

.version 4.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 funj_retval0) cudaMalloj(
	.param .b64 cudaMalloj_param_0,
	.param .b64 cudaMalloj_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 funj_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltss(
	.param .b32 ___ltss_param_0,
	.param .b32 ___ltss_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___ltss_param_0];
	ld.param.f32 	%f2, [___ltss_param_1];
	setp.lt.f32	%p1, %f1, %f2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltdd(
	.param .b64 ___ltdd_param_0,
	.param .b64 ___ltdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___ltdd_param_0];
	ld.param.f64 	%fd2, [___ltdd_param_1];
	setp.lt.f64	%p1, %fd1, %fd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltii(
	.param .b32 ___ltii_param_0,
	.param .b32 ___ltii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___ltii_param_0];
	ld.param.u32 	%r2, [___ltii_param_1];
	setp.lt.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltuu(
	.param .b32 ___ltuu_param_0,
	.param .b32 ___ltuu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___ltuu_param_0];
	ld.param.u32 	%r2, [___ltuu_param_1];
	setp.lt.u32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltjj(
	.param .b32 ___ltjj_param_0,
	.param .b32 ___ltjj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___ltjj_param_1];
	ld.param.s8 	%rs2, [___ltjj_param_0];
	setp.lt.s16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltvv(
	.param .b32 ___ltvv_param_0,
	.param .b32 ___ltvv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___ltvv_param_1];
	ld.param.u8 	%rs2, [___ltvv_param_0];
	setp.lt.u16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltxx(
	.param .b64 ___ltxx_param_0,
	.param .b64 ___ltxx_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___ltxx_param_0];
	ld.param.u64 	%rd2, [___ltxx_param_1];
	setp.lt.s64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltyy(
	.param .b64 ___ltyy_param_0,
	.param .b64 ___ltyy_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___ltyy_param_0];
	ld.param.u64 	%rd2, [___ltyy_param_1];
	setp.lt.u64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltcc(
	.param .align 8 .b8 ___ltcc_param_0[8],
	.param .align 8 .b8 ___ltcc_param_1[8]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<9>;


	ld.param.f32 	%f1, [___ltcc_param_0];
	ld.param.f32 	%f2, [___ltcc_param_0+4];
	ld.param.f32 	%f3, [___ltcc_param_1];
	ld.param.f32 	%f4, [___ltcc_param_1+4];
	mul.f32 	%f5, %f2, %f2;
	fma.rn.f32 	%f6, %f1, %f1, %f5;
	mul.f32 	%f7, %f4, %f4;
	fma.rn.f32 	%f8, %f3, %f3, %f7;
	setp.lt.f32	%p1, %f6, %f8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ltzz(
	.param .align 16 .b8 ___ltzz_param_0[16],
	.param .align 16 .b8 ___ltzz_param_1[16]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd1, [___ltzz_param_0];
	ld.param.f64 	%fd2, [___ltzz_param_0+8];
	ld.param.f64 	%fd3, [___ltzz_param_1];
	ld.param.f64 	%fd4, [___ltzz_param_1+8];
	mul.f64 	%fd5, %fd2, %fd2;
	fma.rn.f64 	%fd6, %fd1, %fd1, %fd5;
	mul.f64 	%fd7, %fd4, %fd4;
	fma.rn.f64 	%fd8, %fd3, %fd3, %fd7;
	setp.lt.f64	%p1, %fd6, %fd8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtss(
	.param .b32 ___gtss_param_0,
	.param .b32 ___gtss_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___gtss_param_0];
	ld.param.f32 	%f2, [___gtss_param_1];
	setp.gt.f32	%p1, %f1, %f2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtdd(
	.param .b64 ___gtdd_param_0,
	.param .b64 ___gtdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___gtdd_param_0];
	ld.param.f64 	%fd2, [___gtdd_param_1];
	setp.gt.f64	%p1, %fd1, %fd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtii(
	.param .b32 ___gtii_param_0,
	.param .b32 ___gtii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___gtii_param_0];
	ld.param.u32 	%r2, [___gtii_param_1];
	setp.gt.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtuu(
	.param .b32 ___gtuu_param_0,
	.param .b32 ___gtuu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___gtuu_param_0];
	ld.param.u32 	%r2, [___gtuu_param_1];
	setp.gt.u32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtjj(
	.param .b32 ___gtjj_param_0,
	.param .b32 ___gtjj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___gtjj_param_1];
	ld.param.s8 	%rs2, [___gtjj_param_0];
	setp.gt.s16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtvv(
	.param .b32 ___gtvv_param_0,
	.param .b32 ___gtvv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___gtvv_param_1];
	ld.param.u8 	%rs2, [___gtvv_param_0];
	setp.gt.u16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtxx(
	.param .b64 ___gtxx_param_0,
	.param .b64 ___gtxx_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___gtxx_param_0];
	ld.param.u64 	%rd2, [___gtxx_param_1];
	setp.gt.s64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtyy(
	.param .b64 ___gtyy_param_0,
	.param .b64 ___gtyy_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___gtyy_param_0];
	ld.param.u64 	%rd2, [___gtyy_param_1];
	setp.gt.u64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtcc(
	.param .align 8 .b8 ___gtcc_param_0[8],
	.param .align 8 .b8 ___gtcc_param_1[8]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<9>;


	ld.param.f32 	%f1, [___gtcc_param_0];
	ld.param.f32 	%f2, [___gtcc_param_0+4];
	ld.param.f32 	%f3, [___gtcc_param_1];
	ld.param.f32 	%f4, [___gtcc_param_1+4];
	mul.f32 	%f5, %f2, %f2;
	fma.rn.f32 	%f6, %f1, %f1, %f5;
	mul.f32 	%f7, %f4, %f4;
	fma.rn.f32 	%f8, %f3, %f3, %f7;
	setp.gt.f32	%p1, %f6, %f8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gtzz(
	.param .align 16 .b8 ___gtzz_param_0[16],
	.param .align 16 .b8 ___gtzz_param_1[16]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd1, [___gtzz_param_0];
	ld.param.f64 	%fd2, [___gtzz_param_0+8];
	ld.param.f64 	%fd3, [___gtzz_param_1];
	ld.param.f64 	%fd4, [___gtzz_param_1+8];
	mul.f64 	%fd5, %fd2, %fd2;
	fma.rn.f64 	%fd6, %fd1, %fd1, %fd5;
	mul.f64 	%fd7, %fd4, %fd4;
	fma.rn.f64 	%fd8, %fd3, %fd3, %fd7;
	setp.gt.f64	%p1, %fd6, %fd8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___less(
	.param .b32 ___less_param_0,
	.param .b32 ___less_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___less_param_0];
	ld.param.f32 	%f2, [___less_param_1];
	setp.le.f32	%p1, %f1, %f2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ledd(
	.param .b64 ___ledd_param_0,
	.param .b64 ___ledd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___ledd_param_0];
	ld.param.f64 	%fd2, [___ledd_param_1];
	setp.le.f64	%p1, %fd1, %fd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___leii(
	.param .b32 ___leii_param_0,
	.param .b32 ___leii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___leii_param_0];
	ld.param.u32 	%r2, [___leii_param_1];
	setp.le.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___leuu(
	.param .b32 ___leuu_param_0,
	.param .b32 ___leuu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___leuu_param_0];
	ld.param.u32 	%r2, [___leuu_param_1];
	setp.le.u32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___lejj(
	.param .b32 ___lejj_param_0,
	.param .b32 ___lejj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___lejj_param_1];
	ld.param.s8 	%rs2, [___lejj_param_0];
	setp.le.s16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___levv(
	.param .b32 ___levv_param_0,
	.param .b32 ___levv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___levv_param_1];
	ld.param.u8 	%rs2, [___levv_param_0];
	setp.le.u16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___lexx(
	.param .b64 ___lexx_param_0,
	.param .b64 ___lexx_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___lexx_param_0];
	ld.param.u64 	%rd2, [___lexx_param_1];
	setp.le.s64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___leyy(
	.param .b64 ___leyy_param_0,
	.param .b64 ___leyy_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___leyy_param_0];
	ld.param.u64 	%rd2, [___leyy_param_1];
	setp.le.u64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___lecc(
	.param .align 8 .b8 ___lecc_param_0[8],
	.param .align 8 .b8 ___lecc_param_1[8]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<9>;


	ld.param.f32 	%f1, [___lecc_param_0];
	ld.param.f32 	%f2, [___lecc_param_0+4];
	ld.param.f32 	%f3, [___lecc_param_1];
	ld.param.f32 	%f4, [___lecc_param_1+4];
	mul.f32 	%f5, %f2, %f2;
	fma.rn.f32 	%f6, %f1, %f1, %f5;
	mul.f32 	%f7, %f4, %f4;
	fma.rn.f32 	%f8, %f3, %f3, %f7;
	setp.le.f32	%p1, %f6, %f8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___lezz(
	.param .align 16 .b8 ___lezz_param_0[16],
	.param .align 16 .b8 ___lezz_param_1[16]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd1, [___lezz_param_0];
	ld.param.f64 	%fd2, [___lezz_param_0+8];
	ld.param.f64 	%fd3, [___lezz_param_1];
	ld.param.f64 	%fd4, [___lezz_param_1+8];
	mul.f64 	%fd5, %fd2, %fd2;
	fma.rn.f64 	%fd6, %fd1, %fd1, %fd5;
	mul.f64 	%fd7, %fd4, %fd4;
	fma.rn.f64 	%fd8, %fd3, %fd3, %fd7;
	setp.le.f64	%p1, %fd6, %fd8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gess(
	.param .b32 ___gess_param_0,
	.param .b32 ___gess_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___gess_param_0];
	ld.param.f32 	%f2, [___gess_param_1];
	setp.ge.f32	%p1, %f1, %f2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gedd(
	.param .b64 ___gedd_param_0,
	.param .b64 ___gedd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___gedd_param_0];
	ld.param.f64 	%fd2, [___gedd_param_1];
	setp.ge.f64	%p1, %fd1, %fd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___geii(
	.param .b32 ___geii_param_0,
	.param .b32 ___geii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___geii_param_0];
	ld.param.u32 	%r2, [___geii_param_1];
	setp.ge.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___geuu(
	.param .b32 ___geuu_param_0,
	.param .b32 ___geuu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___geuu_param_0];
	ld.param.u32 	%r2, [___geuu_param_1];
	setp.ge.u32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gejj(
	.param .b32 ___gejj_param_0,
	.param .b32 ___gejj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___gejj_param_1];
	ld.param.s8 	%rs2, [___gejj_param_0];
	setp.ge.s16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gevv(
	.param .b32 ___gevv_param_0,
	.param .b32 ___gevv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___gevv_param_1];
	ld.param.u8 	%rs2, [___gevv_param_0];
	setp.ge.u16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gexx(
	.param .b64 ___gexx_param_0,
	.param .b64 ___gexx_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___gexx_param_0];
	ld.param.u64 	%rd2, [___gexx_param_1];
	setp.ge.s64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___geyy(
	.param .b64 ___geyy_param_0,
	.param .b64 ___geyy_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___geyy_param_0];
	ld.param.u64 	%rd2, [___geyy_param_1];
	setp.ge.u64	%p1, %rd1, %rd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gecc(
	.param .align 8 .b8 ___gecc_param_0[8],
	.param .align 8 .b8 ___gecc_param_1[8]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<9>;


	ld.param.f32 	%f1, [___gecc_param_0];
	ld.param.f32 	%f2, [___gecc_param_0+4];
	ld.param.f32 	%f3, [___gecc_param_1];
	ld.param.f32 	%f4, [___gecc_param_1+4];
	mul.f32 	%f5, %f2, %f2;
	fma.rn.f32 	%f6, %f1, %f1, %f5;
	mul.f32 	%f7, %f4, %f4;
	fma.rn.f32 	%f8, %f3, %f3, %f7;
	setp.ge.f32	%p1, %f6, %f8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___gezz(
	.param .align 16 .b8 ___gezz_param_0[16],
	.param .align 16 .b8 ___gezz_param_1[16]
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd1, [___gezz_param_0];
	ld.param.f64 	%fd2, [___gezz_param_0+8];
	ld.param.f64 	%fd3, [___gezz_param_1];
	ld.param.f64 	%fd4, [___gezz_param_1+8];
	mul.f64 	%fd5, %fd2, %fd2;
	fma.rn.f64 	%fd6, %fd1, %fd1, %fd5;
	mul.f64 	%fd7, %fd4, %fd4;
	fma.rn.f64 	%fd8, %fd3, %fd3, %fd7;
	setp.ge.f64	%p1, %fd6, %fd8;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andss(
	.param .b32 ___andss_param_0,
	.param .b32 ___andss_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f2, [___andss_param_0];
	ld.param.f32 	%f1, [___andss_param_1];
	setp.neu.f32	%p1, %f2, 0f00000000;
	@%p1 bra 	BB45_2;

	mov.u16 	%rs4, 0;
	bra.uni 	BB45_3;

BB45_2:
	setp.neu.f32	%p2, %f1, 0f00000000;
	selp.u16	%rs4, 1, 0, %p2;

BB45_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___anddd(
	.param .b64 ___anddd_param_0,
	.param .b64 ___anddd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd2, [___anddd_param_0];
	ld.param.f64 	%fd1, [___anddd_param_1];
	setp.neu.f64	%p1, %fd2, 0d0000000000000000;
	@%p1 bra 	BB46_2;

	mov.u16 	%rs4, 0;
	bra.uni 	BB46_3;

BB46_2:
	setp.neu.f64	%p2, %fd1, 0d0000000000000000;
	selp.u16	%rs4, 1, 0, %p2;

BB46_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andii(
	.param .b32 ___andii_param_0,
	.param .b32 ___andii_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___andii_param_0];
	ld.param.u32 	%r2, [___andii_param_1];
	setp.ne.s32	%p1, %r2, 0;
	setp.ne.s32	%p2, %r1, 0;
	and.pred  	%p3, %p1, %p2;
	selp.u32	%r3, 1, 0, %p3;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___anduu(
	.param .b32 ___anduu_param_0,
	.param .b32 ___anduu_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___anduu_param_0];
	ld.param.u32 	%r2, [___anduu_param_1];
	setp.ne.s32	%p1, %r2, 0;
	setp.ne.s32	%p2, %r1, 0;
	and.pred  	%p3, %p1, %p2;
	selp.u32	%r3, 1, 0, %p3;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andjj(
	.param .b32 ___andjj_param_0,
	.param .b32 ___andjj_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___andjj_param_0];
	ld.param.s8 	%rs2, [___andjj_param_1];
	and.b16  	%rs3, %rs2, 255;
	setp.ne.s16	%p1, %rs3, 0;
	and.b16  	%rs4, %rs1, 255;
	setp.ne.s16	%p2, %rs4, 0;
	and.pred  	%p3, %p1, %p2;
	selp.u32	%r1, 1, 0, %p3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andvv(
	.param .b32 ___andvv_param_0,
	.param .b32 ___andvv_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___andvv_param_1];
	setp.ne.s16	%p1, %rs1, 0;
	ld.param.u8 	%rs2, [___andvv_param_0];
	setp.ne.s16	%p2, %rs2, 0;
	and.pred  	%p3, %p1, %p2;
	selp.u32	%r1, 1, 0, %p3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andxx(
	.param .b64 ___andxx_param_0,
	.param .b64 ___andxx_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___andxx_param_0];
	ld.param.u64 	%rd2, [___andxx_param_1];
	setp.ne.s64	%p1, %rd2, 0;
	setp.ne.s64	%p2, %rd1, 0;
	and.pred  	%p3, %p1, %p2;
	selp.u32	%r1, 1, 0, %p3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andyy(
	.param .b64 ___andyy_param_0,
	.param .b64 ___andyy_param_1
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [___andyy_param_0];
	ld.param.u64 	%rd2, [___andyy_param_1];
	setp.ne.s64	%p1, %rd2, 0;
	setp.ne.s64	%p2, %rd1, 0;
	and.pred  	%p3, %p1, %p2;
	selp.u32	%r1, 1, 0, %p3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andcc(
	.param .align 8 .b8 ___andcc_param_0[8],
	.param .align 8 .b8 ___andcc_param_1[8]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<9>;


	ld.param.f32 	%f3, [___andcc_param_0];
	ld.param.f32 	%f4, [___andcc_param_0+4];
	ld.param.f32 	%f2, [___andcc_param_1+4];
	ld.param.f32 	%f1, [___andcc_param_1];
	mul.f32 	%f5, %f4, %f4;
	fma.rn.f32 	%f6, %f3, %f3, %f5;
	setp.neu.f32	%p1, %f6, 0f00000000;
	@%p1 bra 	BB53_2;

	mov.u16 	%rs4, 0;
	bra.uni 	BB53_3;

BB53_2:
	mul.f32 	%f7, %f2, %f2;
	fma.rn.f32 	%f8, %f1, %f1, %f7;
	setp.neu.f32	%p2, %f8, 0f00000000;
	selp.u16	%rs4, 1, 0, %p2;

BB53_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___andzz(
	.param .align 16 .b8 ___andzz_param_0[16],
	.param .align 16 .b8 ___andzz_param_1[16]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd3, [___andzz_param_0];
	ld.param.f64 	%fd4, [___andzz_param_0+8];
	ld.param.f64 	%fd2, [___andzz_param_1+8];
	ld.param.f64 	%fd1, [___andzz_param_1];
	mul.f64 	%fd5, %fd4, %fd4;
	fma.rn.f64 	%fd6, %fd3, %fd3, %fd5;
	setp.neu.f64	%p1, %fd6, 0d0000000000000000;
	@%p1 bra 	BB54_2;

	mov.u16 	%rs4, 0;
	bra.uni 	BB54_3;

BB54_2:
	mul.f64 	%fd7, %fd2, %fd2;
	fma.rn.f64 	%fd8, %fd1, %fd1, %fd7;
	setp.neu.f64	%p2, %fd8, 0d0000000000000000;
	selp.u16	%rs4, 1, 0, %p2;

BB54_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orss(
	.param .b32 ___orss_param_0,
	.param .b32 ___orss_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f2, [___orss_param_0];
	ld.param.f32 	%f1, [___orss_param_1];
	setp.eq.f32	%p1, %f2, 0f00000000;
	@%p1 bra 	BB55_2;

	mov.u16 	%rs4, 1;
	bra.uni 	BB55_3;

BB55_2:
	setp.neu.f32	%p2, %f1, 0f00000000;
	selp.u16	%rs4, 1, 0, %p2;

BB55_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___ordd(
	.param .b64 ___ordd_param_0,
	.param .b64 ___ordd_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd2, [___ordd_param_0];
	ld.param.f64 	%fd1, [___ordd_param_1];
	setp.eq.f64	%p1, %fd2, 0d0000000000000000;
	@%p1 bra 	BB56_2;

	mov.u16 	%rs4, 1;
	bra.uni 	BB56_3;

BB56_2:
	setp.neu.f64	%p2, %fd1, 0d0000000000000000;
	selp.u16	%rs4, 1, 0, %p2;

BB56_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orii(
	.param .b32 ___orii_param_0,
	.param .b32 ___orii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<5>;


	ld.param.u32 	%r1, [___orii_param_0];
	ld.param.u32 	%r2, [___orii_param_1];
	or.b32  	%r3, %r2, %r1;
	setp.ne.s32	%p1, %r3, 0;
	selp.u32	%r4, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r4;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___oruu(
	.param .b32 ___oruu_param_0,
	.param .b32 ___oruu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<5>;


	ld.param.u32 	%r1, [___oruu_param_0];
	ld.param.u32 	%r2, [___oruu_param_1];
	or.b32  	%r3, %r2, %r1;
	setp.ne.s32	%p1, %r3, 0;
	selp.u32	%r4, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r4;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orjj(
	.param .b32 ___orjj_param_0,
	.param .b32 ___orjj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___orjj_param_0];
	ld.param.s8 	%rs2, [___orjj_param_1];
	or.b16  	%rs3, %rs2, %rs1;
	and.b16  	%rs4, %rs3, 255;
	setp.ne.s16	%p1, %rs4, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orvv(
	.param .b32 ___orvv_param_0,
	.param .b32 ___orvv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___orvv_param_0];
	ld.param.u8 	%rs2, [___orvv_param_1];
	or.b16  	%rs3, %rs2, %rs1;
	setp.ne.s16	%p1, %rs3, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orxx(
	.param .b64 ___orxx_param_0,
	.param .b64 ___orxx_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___orxx_param_0];
	ld.param.u64 	%rd2, [___orxx_param_1];
	or.b64  	%rd3, %rd2, %rd1;
	setp.ne.s64	%p1, %rd3, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___oryy(
	.param .b64 ___oryy_param_0,
	.param .b64 ___oryy_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___oryy_param_0];
	ld.param.u64 	%rd2, [___oryy_param_1];
	or.b64  	%rd3, %rd2, %rd1;
	setp.ne.s64	%p1, %rd3, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orcc(
	.param .align 8 .b8 ___orcc_param_0[8],
	.param .align 8 .b8 ___orcc_param_1[8]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<9>;


	ld.param.f32 	%f3, [___orcc_param_0];
	ld.param.f32 	%f4, [___orcc_param_0+4];
	ld.param.f32 	%f2, [___orcc_param_1+4];
	ld.param.f32 	%f1, [___orcc_param_1];
	mul.f32 	%f5, %f4, %f4;
	fma.rn.f32 	%f6, %f3, %f3, %f5;
	setp.eq.f32	%p1, %f6, 0f00000000;
	@%p1 bra 	BB63_2;

	mov.u16 	%rs4, 1;
	bra.uni 	BB63_3;

BB63_2:
	mul.f32 	%f7, %f2, %f2;
	fma.rn.f32 	%f8, %f1, %f1, %f7;
	setp.neu.f32	%p2, %f8, 0f00000000;
	selp.u16	%rs4, 1, 0, %p2;

BB63_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___orzz(
	.param .align 16 .b8 ___orzz_param_0[16],
	.param .align 16 .b8 ___orzz_param_1[16]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd3, [___orzz_param_0];
	ld.param.f64 	%fd4, [___orzz_param_0+8];
	ld.param.f64 	%fd2, [___orzz_param_1+8];
	ld.param.f64 	%fd1, [___orzz_param_1];
	mul.f64 	%fd5, %fd4, %fd4;
	fma.rn.f64 	%fd6, %fd3, %fd3, %fd5;
	setp.eq.f64	%p1, %fd6, 0d0000000000000000;
	@%p1 bra 	BB64_2;

	mov.u16 	%rs4, 1;
	bra.uni 	BB64_3;

BB64_2:
	mul.f64 	%fd7, %fd2, %fd2;
	fma.rn.f64 	%fd8, %fd1, %fd1, %fd7;
	setp.neu.f64	%p2, %fd8, 0d0000000000000000;
	selp.u16	%rs4, 1, 0, %p2;

BB64_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqss(
	.param .b32 ___eqss_param_0,
	.param .b32 ___eqss_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___eqss_param_0];
	ld.param.f32 	%f2, [___eqss_param_1];
	setp.eq.f32	%p1, %f1, %f2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqdd(
	.param .b64 ___eqdd_param_0,
	.param .b64 ___eqdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___eqdd_param_0];
	ld.param.f64 	%fd2, [___eqdd_param_1];
	setp.eq.f64	%p1, %fd1, %fd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqii(
	.param .b32 ___eqii_param_0,
	.param .b32 ___eqii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___eqii_param_0];
	ld.param.u32 	%r2, [___eqii_param_1];
	setp.eq.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___equu(
	.param .b32 ___equu_param_0,
	.param .b32 ___equu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___equu_param_0];
	ld.param.u32 	%r2, [___equu_param_1];
	setp.eq.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqjj(
	.param .b32 ___eqjj_param_0,
	.param .b32 ___eqjj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___eqjj_param_0];
	ld.param.s8 	%rs2, [___eqjj_param_1];
	and.b16  	%rs3, %rs2, 255;
	and.b16  	%rs4, %rs1, 255;
	setp.eq.s16	%p1, %rs4, %rs3;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqvv(
	.param .b32 ___eqvv_param_0,
	.param .b32 ___eqvv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___eqvv_param_1];
	ld.param.u8 	%rs2, [___eqvv_param_0];
	setp.eq.s16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqcc(
	.param .align 8 .b8 ___eqcc_param_0[8],
	.param .align 8 .b8 ___eqcc_param_1[8]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<5>;


	ld.param.f32 	%f2, [___eqcc_param_0+4];
	ld.param.f32 	%f1, [___eqcc_param_0];
	ld.param.f32 	%f4, [___eqcc_param_1+4];
	ld.param.f32 	%f3, [___eqcc_param_1];
	setp.eq.f32	%p1, %f1, %f3;
	@%p1 bra 	BB71_2;

	mov.u16 	%rs4, 0;
	bra.uni 	BB71_3;

BB71_2:
	setp.eq.f32	%p2, %f2, %f4;
	selp.u16	%rs4, 1, 0, %p2;

BB71_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___eqzz(
	.param .align 16 .b8 ___eqzz_param_0[16],
	.param .align 16 .b8 ___eqzz_param_1[16]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<5>;


	ld.param.f64 	%fd2, [___eqzz_param_0+8];
	ld.param.f64 	%fd1, [___eqzz_param_0];
	ld.param.f64 	%fd4, [___eqzz_param_1+8];
	ld.param.f64 	%fd3, [___eqzz_param_1];
	setp.eq.f64	%p1, %fd1, %fd3;
	@%p1 bra 	BB72_2;

	mov.u16 	%rs4, 0;
	bra.uni 	BB72_3;

BB72_2:
	setp.eq.f64	%p2, %fd2, %fd4;
	selp.u16	%rs4, 1, 0, %p2;

BB72_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqss(
	.param .b32 ___neqss_param_0,
	.param .b32 ___neqss_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___neqss_param_0];
	ld.param.f32 	%f2, [___neqss_param_1];
	setp.neu.f32	%p1, %f1, %f2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqdd(
	.param .b64 ___neqdd_param_0,
	.param .b64 ___neqdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___neqdd_param_0];
	ld.param.f64 	%fd2, [___neqdd_param_1];
	setp.neu.f64	%p1, %fd1, %fd2;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqii(
	.param .b32 ___neqii_param_0,
	.param .b32 ___neqii_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___neqii_param_0];
	ld.param.u32 	%r2, [___neqii_param_1];
	setp.ne.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___nequu(
	.param .b32 ___nequu_param_0,
	.param .b32 ___nequu_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___nequu_param_0];
	ld.param.u32 	%r2, [___nequu_param_1];
	setp.ne.s32	%p1, %r1, %r2;
	selp.u32	%r3, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqjj(
	.param .b32 ___neqjj_param_0,
	.param .b32 ___neqjj_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___neqjj_param_0];
	ld.param.s8 	%rs2, [___neqjj_param_1];
	and.b16  	%rs3, %rs2, 255;
	and.b16  	%rs4, %rs1, 255;
	setp.ne.s16	%p1, %rs4, %rs3;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqvv(
	.param .b32 ___neqvv_param_0,
	.param .b32 ___neqvv_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___neqvv_param_1];
	ld.param.u8 	%rs2, [___neqvv_param_0];
	setp.ne.s16	%p1, %rs2, %rs1;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqcc(
	.param .align 8 .b8 ___neqcc_param_0[8],
	.param .align 8 .b8 ___neqcc_param_1[8]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<5>;


	ld.param.f32 	%f2, [___neqcc_param_0+4];
	ld.param.f32 	%f1, [___neqcc_param_0];
	ld.param.f32 	%f4, [___neqcc_param_1+4];
	ld.param.f32 	%f3, [___neqcc_param_1];
	setp.eq.f32	%p1, %f1, %f3;
	@%p1 bra 	BB79_2;

	mov.u16 	%rs4, 1;
	bra.uni 	BB79_3;

BB79_2:
	setp.neu.f32	%p2, %f2, %f4;
	selp.u16	%rs4, 1, 0, %p2;

BB79_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___neqzz(
	.param .align 16 .b8 ___neqzz_param_0[16],
	.param .align 16 .b8 ___neqzz_param_1[16]
)
{
	.reg .pred 	%p<3>;
	.reg .s16 	%rs<5>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<5>;


	ld.param.f64 	%fd2, [___neqzz_param_0+8];
	ld.param.f64 	%fd1, [___neqzz_param_0];
	ld.param.f64 	%fd4, [___neqzz_param_1+8];
	ld.param.f64 	%fd3, [___neqzz_param_1];
	setp.eq.f64	%p1, %fd1, %fd3;
	@%p1 bra 	BB80_2;

	mov.u16 	%rs4, 1;
	bra.uni 	BB80_3;

BB80_2:
	setp.neu.f64	%p2, %fd2, %fd4;
	selp.u16	%rs4, 1, 0, %p2;

BB80_3:
	cvt.u32.u16	%r1, %rs4;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___nots(
	.param .b32 ___nots_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___nots_param_0];
	setp.eq.f32	%p1, %f1, 0f00000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___notd(
	.param .b64 ___notd_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___notd_param_0];
	setp.eq.f64	%p1, %fd1, 0d0000000000000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___noti(
	.param .b32 ___noti_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<3>;


	ld.param.u32 	%r1, [___noti_param_0];
	setp.eq.s32	%p1, %r1, 0;
	selp.u32	%r2, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___notu(
	.param .b32 ___notu_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<3>;


	ld.param.u32 	%r1, [___notu_param_0];
	setp.eq.s32	%p1, %r1, 0;
	selp.u32	%r2, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___notj(
	.param .b32 ___notj_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<2>;


	ld.param.s8 	%rs1, [___notj_param_0];
	and.b16  	%rs2, %rs1, 255;
	setp.eq.s16	%p1, %rs2, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___notv(
	.param .b32 ___notv_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s16 	%rs<2>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___notv_param_0];
	setp.eq.s16	%p1, %rs1, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___notx(
	.param .b64 ___notx_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [___notx_param_0];
	setp.eq.s64	%p1, %rd1, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___noty(
	.param .b64 ___noty_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [___noty_param_0];
	setp.eq.s64	%p1, %rd1, 0;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitandii(
	.param .b32 ___bitandii_param_0,
	.param .b32 ___bitandii_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___bitandii_param_0];
	ld.param.u32 	%r2, [___bitandii_param_1];
	and.b32  	%r3, %r2, %r1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitorii(
	.param .b32 ___bitorii_param_0,
	.param .b32 ___bitorii_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___bitorii_param_0];
	ld.param.u32 	%r2, [___bitorii_param_1];
	or.b32  	%r3, %r2, %r1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitxorii(
	.param .b32 ___bitxorii_param_0,
	.param .b32 ___bitxorii_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___bitxorii_param_0];
	ld.param.u32 	%r2, [___bitxorii_param_1];
	xor.b32  	%r3, %r2, %r1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftlii(
	.param .b32 _Z12___bitshiftlii_param_0,
	.param .b32 _Z12___bitshiftlii_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [_Z12___bitshiftlii_param_0];
	ld.param.u32 	%r2, [_Z12___bitshiftlii_param_1];
	shl.b32 	%r3, %r1, %r2;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftrii(
	.param .b32 _Z12___bitshiftrii_param_0,
	.param .b32 _Z12___bitshiftrii_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [_Z12___bitshiftrii_param_0];
	ld.param.u32 	%r2, [_Z12___bitshiftrii_param_1];
	shr.s32 	%r3, %r1, %r2;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitandjj(
	.param .b32 ___bitandjj_param_0,
	.param .b32 ___bitandjj_param_1
)
{
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<3>;


	ld.param.s8 	%rs1, [___bitandjj_param_0];
	ld.param.s8 	%rs2, [___bitandjj_param_1];
	and.b16  	%rs3, %rs2, %rs1;
	cvt.u32.u16	%r1, %rs3;
	cvt.s32.s8 	%r2, %r1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitorjj(
	.param .b32 ___bitorjj_param_0,
	.param .b32 ___bitorjj_param_1
)
{
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<3>;


	ld.param.s8 	%rs1, [___bitorjj_param_0];
	ld.param.s8 	%rs2, [___bitorjj_param_1];
	or.b16  	%rs3, %rs2, %rs1;
	cvt.u32.u16	%r1, %rs3;
	cvt.s32.s8 	%r2, %r1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitxorjj(
	.param .b32 ___bitxorjj_param_0,
	.param .b32 ___bitxorjj_param_1
)
{
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<3>;


	ld.param.s8 	%rs1, [___bitxorjj_param_0];
	ld.param.s8 	%rs2, [___bitxorjj_param_1];
	xor.b16  	%rs3, %rs2, %rs1;
	cvt.u32.u16	%r1, %rs3;
	cvt.s32.s8 	%r2, %r1;
	st.param.b32	[funj_retval0+0], %r2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftljj(
	.param .b32 _Z12___bitshiftljj_param_0,
	.param .b32 _Z12___bitshiftljj_param_1
)
{
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<5>;


	ld.param.s8 	%rs1, [_Z12___bitshiftljj_param_0];
	ld.param.s8 	%rs2, [_Z12___bitshiftljj_param_1];
	cvt.s32.s16	%r1, %rs1;
	cvt.s32.s16	%r2, %rs2;
	shl.b32 	%r3, %r1, %r2;
	cvt.s32.s8 	%r4, %r3;
	st.param.b32	[funj_retval0+0], %r4;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftrjj(
	.param .b32 _Z12___bitshiftrjj_param_0,
	.param .b32 _Z12___bitshiftrjj_param_1
)
{
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<4>;


	ld.param.s8 	%rs1, [_Z12___bitshiftrjj_param_0];
	ld.param.s8 	%rs2, [_Z12___bitshiftrjj_param_1];
	cvt.s32.s16	%r1, %rs1;
	cvt.s32.s16	%r2, %rs2;
	shr.s32 	%r3, %r1, %r2;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___bitandxx(
	.param .b64 ___bitandxx_param_0,
	.param .b64 ___bitandxx_param_1
)
{
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___bitandxx_param_0];
	ld.param.u64 	%rd2, [___bitandxx_param_1];
	and.b64  	%rd3, %rd2, %rd1;
	st.param.b64	[funj_retval0+0], %rd3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___bitorxx(
	.param .b64 ___bitorxx_param_0,
	.param .b64 ___bitorxx_param_1
)
{
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___bitorxx_param_0];
	ld.param.u64 	%rd2, [___bitorxx_param_1];
	or.b64  	%rd3, %rd2, %rd1;
	st.param.b64	[funj_retval0+0], %rd3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___bitxorxx(
	.param .b64 ___bitxorxx_param_0,
	.param .b64 ___bitxorxx_param_1
)
{
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___bitxorxx_param_0];
	ld.param.u64 	%rd2, [___bitxorxx_param_1];
	xor.b64  	%rd3, %rd2, %rd1;
	st.param.b64	[funj_retval0+0], %rd3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) _Z12___bitshiftlxx(
	.param .b64 _Z12___bitshiftlxx_param_0,
	.param .b64 _Z12___bitshiftlxx_param_1
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z12___bitshiftlxx_param_0];
	ld.param.u32 	%r1, [_Z12___bitshiftlxx_param_1];
	shl.b64 	%rd2, %rd1, %r1;
	st.param.b64	[funj_retval0+0], %rd2;
	ret;
}

.visible .func  (.param .b64 funj_retval0) _Z12___bitshiftrxx(
	.param .b64 _Z12___bitshiftrxx_param_0,
	.param .b64 _Z12___bitshiftrxx_param_1
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z12___bitshiftrxx_param_0];
	ld.param.u32 	%r1, [_Z12___bitshiftrxx_param_1];
	shr.s64 	%rd2, %rd1, %r1;
	st.param.b64	[funj_retval0+0], %rd2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitandvv(
	.param .b32 ___bitandvv_param_0,
	.param .b32 ___bitandvv_param_1
)
{
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___bitandvv_param_0];
	ld.param.u8 	%rs2, [___bitandvv_param_1];
	and.b16  	%rs3, %rs2, %rs1;
	cvt.u32.u16	%r1, %rs3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitorvv(
	.param .b32 ___bitorvv_param_0,
	.param .b32 ___bitorvv_param_1
)
{
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___bitorvv_param_0];
	ld.param.u8 	%rs2, [___bitorvv_param_1];
	or.b16  	%rs3, %rs2, %rs1;
	cvt.u32.u16	%r1, %rs3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitxorvv(
	.param .b32 ___bitxorvv_param_0,
	.param .b32 ___bitxorvv_param_1
)
{
	.reg .s16 	%rs<4>;
	.reg .s32 	%r<2>;


	ld.param.u8 	%rs1, [___bitxorvv_param_0];
	ld.param.u8 	%rs2, [___bitxorvv_param_1];
	xor.b16  	%rs3, %rs2, %rs1;
	cvt.u32.u16	%r1, %rs3;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftlvv(
	.param .b32 _Z12___bitshiftlvv_param_0,
	.param .b32 _Z12___bitshiftlvv_param_1
)
{
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<5>;


	ld.param.u8 	%rs1, [_Z12___bitshiftlvv_param_0];
	ld.param.u8 	%rs2, [_Z12___bitshiftlvv_param_1];
	cvt.u32.u16	%r1, %rs2;
	cvt.u32.u16	%r2, %rs1;
	shl.b32 	%r3, %r2, %r1;
	and.b32  	%r4, %r3, 255;
	st.param.b32	[funj_retval0+0], %r4;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftrvv(
	.param .b32 _Z12___bitshiftrvv_param_0,
	.param .b32 _Z12___bitshiftrvv_param_1
)
{
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<5>;


	ld.param.u8 	%rs1, [_Z12___bitshiftrvv_param_0];
	ld.param.u8 	%rs2, [_Z12___bitshiftrvv_param_1];
	cvt.u32.u16	%r1, %rs2;
	cvt.u32.u16	%r2, %rs1;
	shr.u32 	%r3, %r2, %r1;
	and.b32  	%r4, %r3, 255;
	st.param.b32	[funj_retval0+0], %r4;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitanduu(
	.param .b32 ___bitanduu_param_0,
	.param .b32 ___bitanduu_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___bitanduu_param_0];
	ld.param.u32 	%r2, [___bitanduu_param_1];
	and.b32  	%r3, %r2, %r1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitoruu(
	.param .b32 ___bitoruu_param_0,
	.param .b32 ___bitoruu_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___bitoruu_param_0];
	ld.param.u32 	%r2, [___bitoruu_param_1];
	or.b32  	%r3, %r2, %r1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___bitxoruu(
	.param .b32 ___bitxoruu_param_0,
	.param .b32 ___bitxoruu_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [___bitxoruu_param_0];
	ld.param.u32 	%r2, [___bitxoruu_param_1];
	xor.b32  	%r3, %r2, %r1;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftluu(
	.param .b32 _Z12___bitshiftluu_param_0,
	.param .b32 _Z12___bitshiftluu_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [_Z12___bitshiftluu_param_0];
	ld.param.u32 	%r2, [_Z12___bitshiftluu_param_1];
	shl.b32 	%r3, %r1, %r2;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b32 funj_retval0) _Z12___bitshiftruu(
	.param .b32 _Z12___bitshiftruu_param_0,
	.param .b32 _Z12___bitshiftruu_param_1
)
{
	.reg .s32 	%r<4>;


	ld.param.u32 	%r1, [_Z12___bitshiftruu_param_0];
	ld.param.u32 	%r2, [_Z12___bitshiftruu_param_1];
	shr.u32 	%r3, %r1, %r2;
	st.param.b32	[funj_retval0+0], %r3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___bitandyy(
	.param .b64 ___bitandyy_param_0,
	.param .b64 ___bitandyy_param_1
)
{
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___bitandyy_param_0];
	ld.param.u64 	%rd2, [___bitandyy_param_1];
	and.b64  	%rd3, %rd2, %rd1;
	st.param.b64	[funj_retval0+0], %rd3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___bitoryy(
	.param .b64 ___bitoryy_param_0,
	.param .b64 ___bitoryy_param_1
)
{
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___bitoryy_param_0];
	ld.param.u64 	%rd2, [___bitoryy_param_1];
	or.b64  	%rd3, %rd2, %rd1;
	st.param.b64	[funj_retval0+0], %rd3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) ___bitxoryy(
	.param .b64 ___bitxoryy_param_0,
	.param .b64 ___bitxoryy_param_1
)
{
	.reg .s64 	%rd<4>;


	ld.param.u64 	%rd1, [___bitxoryy_param_0];
	ld.param.u64 	%rd2, [___bitxoryy_param_1];
	xor.b64  	%rd3, %rd2, %rd1;
	st.param.b64	[funj_retval0+0], %rd3;
	ret;
}

.visible .func  (.param .b64 funj_retval0) _Z12___bitshiftlyy(
	.param .b64 _Z12___bitshiftlyy_param_0,
	.param .b64 _Z12___bitshiftlyy_param_1
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z12___bitshiftlyy_param_0];
	ld.param.u32 	%r1, [_Z12___bitshiftlyy_param_1];
	shl.b64 	%rd2, %rd1, %r1;
	st.param.b64	[funj_retval0+0], %rd2;
	ret;
}

.visible .func  (.param .b64 funj_retval0) _Z12___bitshiftryy(
	.param .b64 _Z12___bitshiftryy_param_0,
	.param .b64 _Z12___bitshiftryy_param_1
)
{
	.reg .s32 	%r<2>;
	.reg .s64 	%rd<3>;


	ld.param.u64 	%rd1, [_Z12___bitshiftryy_param_0];
	ld.param.u32 	%r1, [_Z12___bitshiftryy_param_1];
	shr.u64 	%rd2, %rd1, %r1;
	st.param.b64	[funj_retval0+0], %rd2;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___isNaNs(
	.param .b32 ___isNaNs_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___isNaNs_param_0];
	abs.f32 	%f2, %f1;
	setp.gtu.f32	%p1, %f2, 0f7F800000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___isINFs(
	.param .b32 ___isINFs_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<3>;


	ld.param.f32 	%f1, [___isINFs_param_0];
	abs.f32 	%f2, %f1;
	setp.eq.f32	%p1, %f2, 0f7F800000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___iszeros(
	.param .b32 ___iszeros_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f32 	%f<2>;


	ld.param.f32 	%f1, [___iszeros_param_0];
	setp.eq.f32	%p1, %f1, 0f00000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___isNaNd(
	.param .b64 ___isNaNd_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___isNaNd_param_0];
	abs.f64 	%fd2, %fd1;
	setp.gtu.f64	%p1, %fd2, 0d7FF0000000000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___isINFd(
	.param .b64 ___isINFd_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [___isINFd_param_0];
	abs.f64 	%fd2, %fd1;
	setp.eq.f64	%p1, %fd2, 0d7FF0000000000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}

.visible .func  (.param .b32 funj_retval0) ___iszerod(
	.param .b64 ___iszerod_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<2>;
	.reg .f64 	%fd<2>;


	ld.param.f64 	%fd1, [___iszerod_param_0];
	setp.eq.f64	%p1, %fd1, 0d0000000000000000;
	selp.u32	%r1, 1, 0, %p1;
	st.param.b32	[funj_retval0+0], %r1;
	ret;
}


